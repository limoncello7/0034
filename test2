app.layout = dbc.Container(
    [
        html.H1("Dashboard of Oil and Gas Prices"),
        dcc.Tabs(
            id="tabs",
            value="daily",
            children=[
                dcc.Tab(
                    label="Daily Prices",
                    value="daily",
                    children=[
                        html.P(
                            "This chart shows the changes in Brent & WTI oil prices."
                        ),
                        dcc.Graph(id="line-daily", figure=fig_1),
                        html.P(
                            "This chart shows the trend of Brent price changes compared to gas price changes."
                        ),
                        dcc.Graph(id="pattern-matching-graph-daily"),
                    ],
                ),
                dcc.Tab(
                    label="Monthly Prices",
                    value="monthly",
                    children=[
                        html.P(
                            "This chart shows the changes in Brent & WTI oil prices."
                        ),
                        dcc.Graph(id="line-monthly", figure=fig_1),
                        html.P(
                            "This chart shows the trend of Brent price changes compared to gas price changes."
                        ),
                        dcc.Graph(id="pattern-matching-graph-monthly"),
                    ],
                ),
            ],
        ),
    ],
    fluid=True,
)

@app.callback(
    Output("pattern-matching-graph-daily", "figure"),
    Input("category-dropdown", "value"),
)
def update_graph_daily(category):
    if category == "gas":
        df = df_gas_daily
        title = "Gas Prices"
    elif category == "wti":
        df = df_wti_daily
        title = "WTI Prices"
    else:
        df = df_brent_daily
        title = "Brent Prices"

    x = df["Date"]
    y = df["Price"]

    return {
        "data": [
            go.Scatter(
                x=x,
                y=y,
                mode="lines+markers",
            )
        ],
        "layout": go.Layout(
            title=title,
            xaxis={"title": "Date"},
            yaxis={"title": "Price ($/bbl)"},
        ),
    }

@app.callback(
    Output("pattern-matching-graph-monthly", "figure"),
    Input("category-dropdown", "value"),
)
def update_graph_monthly(category):
    if category == "gas":
        df = df_gas_monthly
        title = "Gas Prices"
    elif category == "wti":
        df = df_wti_monthly
        title = "WTI Prices"
    else:
        df = df_brent_monthly
        title = "Brent Prices"

    x = df["Date"]
    y = df["Price"]

    return {
        "data": [
            go.Scatter(
                x=x,
                y=y,
                mode="lines+markers",
            )
        ],
        "layout": go.Layout(
            title=title,
            xaxis={"title": "Date"},
            yaxis={"title": "Price ($/bbl)"},
        ),
    }

